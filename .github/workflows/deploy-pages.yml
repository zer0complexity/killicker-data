name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch enough history so we can diff the pushed range
          fetch-depth: 2

      - name: Create last-tracks-update file
        run: |
          echo "$(date -u '+%Y-%m-%dT%H:%M:%SZ')" > last-tracks-update

      - name: Detect tracks.json changes (payload + git)
        id: tracks_changed
        run: |
          set -euo pipefail

          changed=false

          echo "Checking push payload for tracks.json changes..."
          # Correct jq filter: flatten file lists and include head_commit as fallback for truncated payloads
          if jq -e '
            def files: (.added // []) + (.modified // []) + (.removed // []);
            any((.commits[]?, .head_commit?); files[]? == "tracks.json")
          ' "$GITHUB_EVENT_PATH" >/dev/null 2>&1; then
            changed=true
            echo "Detected change via payload: tracks.json"
          else
            echo "Payload did not show change; attempting git diff fallback..."
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"

            # Skip git diff if BEFORE is all zeros (e.g., first push) or empty
            if [ -n "$BEFORE" ] && ! echo "$BEFORE" | grep -qE '^[0]{40}$'; then
              if git diff --name-only "$BEFORE" "$AFTER" | grep -qx 'tracks.json'; then
                changed=true
                echo "Detected change via git diff: tracks.json"
              else
                echo "git diff did not include tracks.json"
              fi
            else
              echo "No valid BEFORE SHA available for git diff fallback"
            fi
          fi

          echo "changed=${changed}" >> "$GITHUB_OUTPUT"
          echo "Tracks changed: ${changed}"

      - name: Write update.json
        if: steps.tracks_changed.outputs.changed == 'true'
        run: |
          NOW=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          if [ -f update.json ]; then
            # Preserve existing fields (like .live) and only update tracks.edited
            jq --arg now "$NOW" '.tracks.edited=$now' update.json > update.json.tmp && mv update.json.tmp update.json
          else
            # Create a minimal file matching the expected structure
            jq -n --arg now "$NOW" '{tracks:{edited:$now}}' > update.json
          fi

      - name: No changes to tracks.json
        if: steps.tracks_changed.outputs.changed == 'false'
        run: |
          echo "No changes to tracks.json; not updating update.json"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4